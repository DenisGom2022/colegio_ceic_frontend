import React, { useState, useEffect, useCallback, useMemo } from "react";
import { Link } from "react-router-dom";
import {
    FaSearch,
    FaEye,
    FaPencilAlt,
    FaTrash,
    FaPlus,
    FaGraduationCap,
    FaTh,
    FaFilter,
    FaChartBar,
    // Unused icons - commented to fix warnings
    // FaSort,
    // FaChevronLeft,
    // FaChevronRight,
    // FaCalendarAlt,
    // FaCog,
    // FaLayerGroup,
    // FaCheck,
    // FaExclamationTriangle,
    // FaInfoCircle,
    // FaUserGraduate,
    // FaClipboard
} from "react-icons/fa";
import { useGradeTable } from "../hooks/useGradeTable";
import type { Grado } from "../services/gradoService";
import DeleteConfirmModal from "../../../../../components/DeleteConfirmModal";
import { deleteGrado } from "../services/gradoService";
import styles from "./GradesPage.module.css";

// Tipos para mejor tipado
interface GradeFilters {
    page: number;
    pageSize: number;
    searchQuery: string;
    activeFilter: string;
    levelFilter: string;
}

interface GradeStatistics {
    total: number;
    active: number;
    inactive: number;
    byLevel: Record<string, number>;
}

// Opciones de filtrado
const STATUS_FILTER_OPTIONS = [
    { value: "", label: "Todos los estados" },
    { value: "active", label: "Activos" },
    { value: "inactive", label: "Inactivos" }
];

const LEVEL_FILTER_OPTIONS = [
    { value: "", label: "Todos los niveles" },
    { value: "preescolar", label: "Preescolar" },
    { value: "primaria", label: "Primaria" },
    { value: "secundaria", label: "Secundaria" },
    { value: "diversificado", label: "Diversificado" }
];

const SORT_OPTIONS = [
    { value: "nombre", label: "Nombre" },
    { value: "nivel", label: "Nivel académico" },
    { value: "createdAt", label: "Fecha de creación" }
];

const GradesPage: React.FC = () => {
    // === ESTADOS ===
    
    // Estado de filtros y paginación
    const [searchQuery, setSearchQuery] = useState<string>("");
    const [activeSearchQuery, setActiveSearchQuery] = useState<string>("");
    const [page, setPage] = useState<number>(1);
    const [pageSize, setPageSize] = useState<number>(10);
    const [levelFilter, setLevelFilter] = useState<string>("");
    const [statusFilter, setStatusFilter] = useState<string>("");
    const [sortField, setSortField] = useState<string>("nombre");
    const [sortDirection, setSortDirection] = useState<"asc" | "desc">("asc");
    const [showFilters, setShowFilters] = useState<boolean>(false);
    
    // Estado de vista
    const [viewMode] = useState<'card' | 'list'>(localStorage.getItem('gradeViewMode') as 'card' | 'list' || 'card');
    
    // Estado del modal de eliminación
    const [deleteModalOpen, setDeleteModalOpen] = useState<boolean>(false);
    const [gradeToDelete, setGradeToDelete] = useState<string | null>(null);
    const [deleteLoading, setDeleteLoading] = useState<boolean>(false);
    const [highlightedRow, setHighlightedRow] = useState<string | null>(null);

    // Obtener datos de grados
    const {
        grades,
        loading,
        error,
        refetch
    } = useGradeTable({
        page,
        limit: pageSize,
        searchTerm: activeSearchQuery,
        sortField,
        sortDirection
    });

    // === CÁLCULOS DERIVADOS ===
    
    // Estadísticas de grados
    const [gradeStatistics, setGradeStatistics] = useState<GradeStatistics>({
        total: 0,
        active: 0,
        inactive: 0,
        byLevel: {}
    });

    // Filtrar grados según los criterios
    const filteredGrades = useMemo(() => {
        if (!grades || !grades.grados) return [];
        
        let filtered = [...grades.grados];
        
        if (statusFilter) {
            filtered = filtered.filter(grade => 
                statusFilter === "active" ? grade.deletedAt === null : grade.deletedAt !== null
            );
        }
        
        if (levelFilter) {
            filtered = filtered.filter(grade => 
                grade.nivelAcademico && 
                grade.nivelAcademico.descripcion.toLowerCase().includes(levelFilter.toLowerCase())
            );
        }
        
        return filtered;
    }, [grades, statusFilter, levelFilter]);

    // === MANEJADORES DE EVENTOS ===
    
    const handleSearch = (e: React.FormEvent) => {
        e.preventDefault();
        setActiveSearchQuery(searchQuery);
        setPage(1);
    };
    
    const clearSearch = () => {
        setSearchQuery("");
        setActiveSearchQuery("");
        setPage(1);
    };

    const clearAllFilters = () => {
        setSearchQuery("");
        setActiveSearchQuery("");
        setLevelFilter("");
        setStatusFilter("");
        setSortField("nombre");
        setSortDirection("asc");
        setPage(1);
    };

    const handleDeleteClick = (gradeId: string) => {
        setGradeToDelete(gradeId);
        setDeleteModalOpen(true);
    };
    
    const handleCloseDeleteModal = () => {
        setDeleteModalOpen(false);
        setGradeToDelete(null);
    };
    
    const handleConfirmDelete = async (itemId: string) => {
        if (!itemId) return;
        
        setDeleteLoading(true);
        try {
            await deleteGrado(parseInt(itemId));
            refetch();
            // Highlight success message and fade out
            setTimeout(() => {
                setHighlightedRow(null);
            }, 2000);
        } catch (error) {
            console.error("Error al eliminar grado", error);
        } finally {
            setDeleteLoading(false);
            setDeleteModalOpen(false);
            setGradeToDelete(null);
        }
    };

    // === EFECTOS ===
    
    // Calcular estadísticas cuando cambian los datos
    useEffect(() => {
        if (grades && grades.grados) {
            const activeGrades = grades.grados.filter(g => g.deletedAt === null).length;
            const inactiveGrades = grades.grados.filter(g => g.deletedAt !== null).length;
            
            const byLevel: Record<string, number> = {};
            grades.grados.forEach(grade => {
                if (grade.nivelAcademico) {
                    const level = grade.nivelAcademico.descripcion;
                    byLevel[level] = (byLevel[level] || 0) + 1;
                }
            });
            
            setGradeStatistics({
                total: grades.total,
                active: activeGrades,
                inactive: inactiveGrades,
                byLevel
            });
        }
    }, [grades]);

    // === HELPERS ===
    
    const getGradeStatus = (grade: Grado) => {
        return grade.deletedAt === null ? "active" : "inactive";
    };
    
    const getInitials = (grade: Grado) => {
        if (!grade.nombre) return "G";
        const words = grade.nombre.split(" ");
        if (words.length >= 2) {
            return (words[0][0] + words[1][0]).toUpperCase();
        } else if (words.length === 1) {
            return words[0].substring(0, 2).toUpperCase();
        }
        return "G";
    };

    // Función para recargar datos
    const recargarDatos = () => {
        refetch();
    };

    // === RENDERIZADO CONDICIONAL ===
    
    // Mostrar pantalla de carga
    if (loading && (!grades || grades.grados.length === 0)) {
        return (
            <div className={styles.loadingContainer}>
                <div className={styles.spinner}></div>
                <p>Cargando grados académicos...</p>
            </div>
        );
    }

    // Mostrar error si ocurre
    if (error) {
        return (
            <div className={styles.errorContainer}>
                <div className={styles.emptyState}>
                    <div className={styles.emptyStateIcon}>
                        <FaSearch />
                    </div>
                    <h3 className={styles.emptyStateTitle}>Error al cargar los datos</h3>
                    <p className={styles.emptyStateText}>
                        Ha ocurrido un problema al obtener la información de los grados académicos. 
                        Por favor intente nuevamente.
                    </p>
                    <button 
                        onClick={() => recargarDatos()} 
                        className={styles.emptyStateAction}
                    >
                        <FaSearch />
                        Reintentar
                    </button>
                </div>
            </div>
        );
    }

    // === RENDERIZADO PRINCIPAL ===
    
    return (
        <div className={styles.pageContainer}>
            {/* Encabezado principal con dashboard */}
            <header className={styles.dashboardHeader}>
                <div className={styles.headerContent}>
                    <div className={styles.headerMain}>
                        <div className={styles.titleWrapper}>
                            <FaGraduationCap className={styles.headerIcon} />
                            <div>
                                <h1 className={styles.pageTitle}>Gestión de Grados Académicos</h1>
                                <p className={styles.pageDescription}>
                                    Sistema integral para la administración y organización de grados académicos
                                </p>
                            </div>
                        </div>

                        {/* Estadísticas en el encabezado */}
                        <div className={styles.statsContainer}>
                            <div className={styles.statCard}>
                                <div className={styles.statValue}>{gradeStatistics.total}</div>
                                <div className={styles.statLabel}>Total Grados</div>
                                <div className={styles.statIcon}>
                                    <FaChartBar />
                                </div>
                            </div>
                            
                            <div className={styles.statCard}>
                                <div className={styles.statValue}>{gradeStatistics.active}</div>
                                <div className={styles.statLabel}>Activos</div>
                                <div className={styles.statIcon}>
                                    <FaGraduationCap />
                                </div>
                            </div>
                            
                            <div className={styles.statCard}>
                                <div className={styles.statValue}>{gradeStatistics.inactive}</div>
                                <div className={styles.statLabel}>Inactivos</div>
                                <div className={styles.statIcon}>
                                    <FaTh />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </header>

            {/* Barra de herramientas y búsqueda */}
            <section className={styles.toolbarSection}>
                <div className={styles.toolbarHeader}>
                    <div className={styles.searchContainer}>
                        <form className={styles.searchForm} onSubmit={handleSearch}>
                            <FaSearch className={styles.searchIcon} />
                            <input
                                type="text"
                                className={styles.searchInput}
                                placeholder="Buscar grados por nombre, nivel o jornada..."
                                value={searchQuery}
                                onChange={(e) => setSearchQuery(e.target.value)}
                            />
                            {searchQuery && (
                                <button
                                    type="button"
                                    className={styles.clearSearch}
                                    onClick={clearSearch}
                                    aria-label="Limpiar búsqueda"
                                >
                                    ×
                                </button>
                            )}
                        </form>
                    </div>
                    
                    <div className={styles.actionButtons}>
                        <button
                            className={`${styles.filterButton} ${showFilters ? styles.active : ''}`}
                            onClick={() => setShowFilters(!showFilters)}
                        >
                            <FaFilter />
                            Filtros
                        </button>
                        
                        <Link to="/admin/crear-grado" className={styles.addButton}>
                            <FaPlus />
                            Nuevo Grado
                        </Link>
                    </div>
                </div>
                
                {showFilters && (
                    <div className={styles.filtersContainer}>
                        <div className={styles.filterGroup}>
                            <label htmlFor="levelFilter" className={styles.filterLabel}>
                                Nivel Académico
                            </label>
                            <select
                                id="levelFilter"
                                className={styles.filterSelect}
                                value={levelFilter}
                                onChange={(e) => setLevelFilter(e.target.value)}
                            >
                                {LEVEL_FILTER_OPTIONS.map(option => (
                                    <option key={option.value} value={option.value}>
                                        {option.label}
                                    </option>
                                ))}
                            </select>
                        </div>
                        
                        <div className={styles.filterGroup}>
                            <label htmlFor="statusFilter" className={styles.filterLabel}>
                                Estado
                            </label>
                            <select
                                id="statusFilter"
                                className={styles.filterSelect}
                                value={statusFilter}
                                onChange={(e) => setStatusFilter(e.target.value)}
                            >
                                {STATUS_FILTER_OPTIONS.map(option => (
                                    <option key={option.value} value={option.value}>
                                        {option.label}
                                    </option>
                                ))}
                            </select>
                        </div>
                        
                        <div className={styles.filterGroup}>
                            <label htmlFor="sortField" className={styles.filterLabel}>
                                Ordenar por
                            </label>
                            <select
                                id="sortField"
                                className={styles.filterSelect}
                                value={sortField}
                                onChange={(e) => setSortField(e.target.value)}
                            >
                                {SORT_OPTIONS.map(option => (
                                    <option key={option.value} value={option.value}>
                                        {option.label}
                                    </option>
                                ))}
                            </select>
                        </div>
                        
                        <div className={styles.filterGroup}>
                            <label htmlFor="sortDirection" className={styles.filterLabel}>
                                Dirección
                            </label>
                            <select
                                id="sortDirection"
                                className={styles.filterSelect}
                                value={sortDirection}
                                onChange={(e) => setSortDirection(e.target.value as 'asc' | 'desc')}
                            >
                                <option value="asc">Ascendente</option>
                                <option value="desc">Descendente</option>
                            </select>
                        </div>
                        
                        <div className={styles.filterActions}>
                            <button
                                className={styles.resetButton}
                                onClick={clearAllFilters}
                            >
                                Limpiar
                            </button>
                        </div>
                    </div>
                )}
            </section>

            {/* Banner de búsqueda activa */}
            {activeSearchQuery && (
                <div className={styles.activeSearchBanner}>
                    <span>Mostrando resultados para: "{activeSearchQuery}"</span>
                    <button onClick={clearSearch} className={styles.clearSearchButton}>
                        Limpiar búsqueda
                    </button>
                </div>
            )}

            {/* Contenido principal: Listado de grados o estado vacío */}
            <div className={styles.content}>
                {loading ? (
                    <div className={styles.loadingState}>
                        <div className={styles.loadingSpinner}></div>
                        <p className={styles.loadingText}>Cargando grados académicos...</p>
                    </div>
                ) : !filteredGrades || filteredGrades.length === 0 ? (
                    <div className={styles.emptyState}>
                        <div className={styles.emptyStateIcon}>
                            {activeSearchQuery || levelFilter || statusFilter ? <FaSearch /> : <FaGraduationCap />}
                        </div>
                        <h3 className={styles.emptyStateTitle}>
                            {activeSearchQuery || levelFilter || statusFilter 
                                ? 'No se encontraron grados con esos criterios' 
                                : 'No hay grados académicos registrados'
                            }
                        </h3>
                        <p className={styles.emptyStateText}>
                            {activeSearchQuery || levelFilter || statusFilter
                                ? "Intente ajustando los filtros o términos de búsqueda para obtener resultados" 
                                : "Puede comenzar creando el primer grado académico en el sistema"
                            }
                        </p>
                        {!activeSearchQuery && !levelFilter && !statusFilter ? (
                            <Link to="/admin/crear-grado" className={styles.emptyStateAction}>
                                <FaPlus />
                                Crear primer grado
                            </Link>
                        ) : (
                            <button onClick={clearAllFilters} className={styles.emptyStateAction}>
                                <FaFilter />
                                Limpiar filtros
                            </button>
                        )}
                    </div>
                ) : (
                    <>
                        <div className={styles.gradesGrid}>
                            {filteredGrades.map((grade: Grado) => (
                                <div
                                    key={grade.id}
                                    className={`${styles.gradeCard} ${
                                        highlightedRow === grade.id.toString() ? styles.highlighted : ''
                                    }`}
                                >
                                    <div className={styles.cardHeader}>
                                        <div className={styles.cardAvatar}>
                                            {getInitials(grade)}
                                        </div>
                                        <div className={styles.cardHeaderContent}>
                                            <h3 className={styles.cardTitle}>
                                                {grade.nombre || 'Grado sin nombre'}
                                            </h3>
                                            <div className={styles.cardMeta}>
                                                <span className={styles.cardId}>ID: {grade.id}</span>
                                                <span className={styles.cardLevel}>
                                                    {grade.nivelAcademico?.descripcion || 'Sin nivel'}
                                                </span>
                                            </div>
                                        </div>
                                        <div className={`${styles.statusBadge} ${styles[getGradeStatus(grade)]}`}>
                                            {getGradeStatus(grade) === 'active' ? 'ACTIVO' : 'INACTIVO'}
                                        </div>
                                    </div>
                                    
                                    <div className={styles.cardBody}>
                                        <div className={styles.detailRow}>
                                            <span className={styles.detailLabel}>Jornada:</span>
                                            <span className={styles.detailValue}>
                                                {grade.jornada?.descripcion || 'No definida'}
                                            </span>
                                        </div>
                                        
                                        {grade.gradosCiclo && grade.gradosCiclo.some((gc: any) => 
                                            gc.ciclo && gc.ciclo.fechaFin === null
                                        ) && (
                                            <div className={styles.detailRow}>
                                                <span className={styles.detailLabel}>Ciclo actual:</span>
                                                <span className={styles.detailValue}>
                                                    {grade.gradosCiclo.find((gc: any) => 
                                                        gc.ciclo && gc.ciclo.fechaFin === null
                                                    )?.ciclo?.nombre || 'Ciclo activo'}
                                                </span>
                                            </div>
                                        )}
                                    </div>
                                    
                                    <div className={styles.cardFooter}>
                                        <div className={styles.cardActions}>
                                            <Link
                                                to={`/admin/grados/${grade.id}`}
                                                className={styles.actionButton}
                                                title="Ver detalles"
                                            >
                                                <FaEye />
                                            </Link>
                                            <Link
                                                to={`/admin/grados/editar/${grade.id}`}
                                                className={styles.actionButton}
                                                title="Editar grado"
                                            >
                                                <FaPencilAlt />
                                            </Link>
                                            <button
                                                onClick={() => handleDeleteClick(grade.id.toString())}
                                                className={`${styles.actionButton} ${styles.deleteButton}`}
                                                title="Eliminar grado"
                                            >
                                                <FaTrash />
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                        
                        <div className={styles.pagination}>
                            <div className={styles.pageInfo}>
                                Mostrando {filteredGrades.length} de {grades?.total || 0} resultados
                            </div>
                            
                            <div className={styles.pageControls}>
                                <button
                                    className={styles.pageButton}
                                    onClick={() => setPage(page > 1 ? page - 1 : 1)}
                                    disabled={page === 1}
                                >
                                    &lt;
                                </button>
                                
                                {[...Array(Math.ceil((grades?.total || 0) / pageSize))].map((_, i) => (
                                    <button
                                        key={i}
                                        className={`${styles.pageButton} ${page === i + 1 ? styles.active : ''}`}
                                        onClick={() => setPage(i + 1)}
                                    >
                                        {i + 1}
                                    </button>
                                ))}
                                
                                <button
                                    className={styles.pageButton}
                                    onClick={() => setPage(page < Math.ceil((grades?.total || 0) / pageSize) ? page + 1 : page)}
                                    disabled={page >= Math.ceil((grades?.total || 0) / pageSize)}
                                >
                                    &gt;
                                </button>
                            </div>
                        </div>
                    </>
                )}
            </div>
            
            {/* Modal de confirmación para eliminar grado */}
            <DeleteConfirmModal 
                isOpen={deleteModalOpen}
                title="Eliminar Grado"
                message={`¿Está seguro que desea eliminar el grado "${gradeToDelete}"? Esta acción no se puede deshacer.`}
                itemId={gradeToDelete?.toString() || ""}
                onConfirm={handleConfirmDelete}
                onCancel={handleCloseDeleteModal}
                isLoading={deleteLoading}
            />
        </div>
    );
};

export default GradesPage;
