import React, { useState, useEffect, useCallback, useMemo } from "react";
import { Link } from "react-router-dom";
import {
    FaSearch,
    FaEye,
    FaPencilAlt,
    FaTrash,
    FaPlus,
    FaGraduationCap,
    FaTh,
    FaFilter,
    FaChartBar,
    FaSort,
    FaChevronLeft,
    FaChevronRight,
    FaCalendarAlt,
    FaCog,
    FaLayerGroup,
    FaCheck,
    FaExclamationTriangle,
    FaInfoCircle,
    FaUserGraduate,
    FaClipboard
} from "react-icons/fa";
import { useGradeTable } from "../hooks/useGradeTable";
import type { Grado } from "../services/gradoService";
import DeleteConfirmModal from "../../../../../components/DeleteConfirmModal";
import { deleteGrado } from "../services/gradoService";
import styles from "./GradesPage.module.css";

// Tipos para mejor tipado
interface GradeFilters {
    page: number;
    pageSize: number;
    searchQuery: string;
    activeSearchQuery: string;
    sortField: string;
    sortDirection: 'asc' | 'desc';
    levelFilter: string;
    statusFilter: string;
}

interface GradeStatistics {
    total: number;
    active: number;
    inactive: number;
    byLevel: Record<string, number>;
}

// Opciones para el número de registros por página
const PAGE_SIZE_OPTIONS = [6, 12, 24, 48] as const;

// Opciones de filtrado
const LEVEL_FILTER_OPTIONS = [
    { value: '', label: 'Todos los niveles' },
    { value: 'primaria', label: 'Primaria' },
    { value: 'secundaria', label: 'Secundaria' },
    { value: 'bachillerato', label: 'Bachillerato' }
] as const;

const STATUS_FILTER_OPTIONS = [
    { value: '', label: 'Todos los estados' },
    { value: 'active', label: 'Activos' },
    { value: 'inactive', label: 'Inactivos' }
] as const;

// Opciones de ordenamiento
const SORT_OPTIONS = [
    { value: 'id', label: 'ID' },
    { value: 'nombre', label: 'Nombre' },
    { value: 'createdAt', label: 'Fecha de creación' },
    { value: 'nivelAcademico', label: 'Nivel académico' }
] as const;

// Funciones para persistir y recuperar los filtros en localStorage
const saveFiltersToStorage = (filters: any) => {
    localStorage.setItem('gradesFilters', JSON.stringify(filters));
};

const getFiltersFromStorage = () => {
    const savedFilters = localStorage.getItem('gradesFilters');
    if (savedFilters) {
        return JSON.parse(savedFilters);
    }
    return null;
};

const GradesPage: React.FC = () => {
    // === ESTADO Y CONFIGURACIÓN ===
    const savedFilters = getFiltersFromStorage();
    
    // Estados de filtros y paginación
    const [page, setPage] = useState(savedFilters?.page || 1);
    const pageSize = savedFilters?.pageSize || PAGE_SIZE_OPTIONS[1];
    const [searchQuery, setSearchQuery] = useState(savedFilters?.searchQuery || "");
    const [activeSearchQuery, setActiveSearchQuery] = useState(savedFilters?.activeSearchQuery || "");
    const [sortField, setSortField] = useState(savedFilters?.sortField || "nombre");
    const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>(savedFilters?.sortDirection || "asc");
    const [levelFilter, setLevelFilter] = useState(savedFilters?.levelFilter || "");
    const [statusFilter, setStatusFilter] = useState(savedFilters?.statusFilter || "");
    const [showFilters, setShowFilters] = useState(false);
    
    // Estados de UI
    const [lastViewedGrade, setLastViewedGrade] = useState(localStorage.getItem('lastViewedGrade') || "");
    const [highlightedRow, setHighlightedRow] = useState("");
    const [viewMode, setViewMode] = useState<'card' | 'list'>(localStorage.getItem('gradeViewMode') as 'card' | 'list' || 'card');
    
    // Estados del modal de eliminación
    const [deleteModalOpen, setDeleteModalOpen] = useState(false);
    const [gradeToDelete, setGradeToDelete] = useState<number | null>(null);
    const [deleteLoading, setDeleteLoading] = useState(false);
    
    // === HOOK DE DATOS ===
    const {
        grades,
        loading,
        error,
        refetch: recargarDatos
    } = useGradeTable({
        page,
        limit: pageSize,
        searchTerm: activeSearchQuery,
        sortField,
        sortDirection
    });
    
    // === EFECTOS ===
    
    // Persistir filtros en localStorage
    useEffect(() => {
        const filters: GradeFilters = {
            page,
            pageSize,
            searchQuery,
            activeSearchQuery,
            sortField,
            sortDirection,
            levelFilter,
            statusFilter
        };
        saveFiltersToStorage(filters);
    }, [page, pageSize, searchQuery, activeSearchQuery, sortField, sortDirection, levelFilter, statusFilter]);
    
    // Efecto para guardar el modo de visualización
    useEffect(() => {
        localStorage.setItem('gradeViewMode', viewMode);
    }, [viewMode]);

    // Calcular estadísticas de grados
    const gradeStatistics = useMemo((): GradeStatistics => {
        if (!grades?.grados) {
            return { total: 0, active: 0, inactive: 0, byLevel: {} };
        }

        const stats = grades.grados.reduce((acc, grade) => {
            const hasActiveCycle = grade.gradosCiclo?.some((gc: any) => 
                gc.ciclo && gc.ciclo.fechaFin === null
            );
            
            if (hasActiveCycle) acc.active++;
            else acc.inactive++;

            const level = grade.nivelAcademico?.descripcion || 'Sin nivel';
            acc.byLevel[level] = (acc.byLevel[level] || 0) + 1;

            return acc;
        }, { active: 0, inactive: 0, byLevel: {} as Record<string, number> });

        return {
            total: grades.total || grades.grados.length,
            ...stats
        };
    }, [grades]);

    // Filtrar grados aplicando filtros adicionales
    const filteredGrades = useMemo(() => {
        if (!grades?.grados) return [];

        return grades.grados.filter(grade => {
            // Filtro por nivel académico
            if (levelFilter) {
                const gradeLevel = grade.nivelAcademico?.descripcion?.toLowerCase() || '';
                if (!gradeLevel.includes(levelFilter.toLowerCase())) {
                    return false;
                }
            }

            // Filtro por estado
            if (statusFilter) {
                const hasActiveCycle = grade.gradosCiclo?.some((gc: any) => 
                    gc.ciclo && gc.ciclo.fechaFin === null
                );
                
                if (statusFilter === 'active' && !hasActiveCycle) return false;
                if (statusFilter === 'inactive' && hasActiveCycle) return false;
            }

            return true;
        });
    }, [grades?.grados, levelFilter, statusFilter]);
    
    // Resaltar grado recién consultado
    useEffect(() => {
        if (lastViewedGrade && grades?.grados && grades.grados.length > 0 && 
            grades.grados.some(g => g?.id.toString() === lastViewedGrade)) {
            setHighlightedRow(lastViewedGrade);
            
            const timer = setTimeout(() => {
                setHighlightedRow("");
                localStorage.removeItem('lastViewedGrade');
                setLastViewedGrade("");
            }, 900);
            
            return () => clearTimeout(timer);
        }
    }, [lastViewedGrade, grades]);
    
    // === FUNCIONES UTILITARIAS ===
    
    /**
     * Obtiene las iniciales para el avatar del grado
     */
    const getInitials = useCallback((grade: Grado): string => {
        if (!grade.nombre) return "NA";
        
        const words = grade.nombre.split(' ');
        if (words.length >= 2) {
            return `${words[0].charAt(0)}${words[1].charAt(0)}`.toUpperCase();
        }
        return grade.nombre.charAt(0).toUpperCase();
    }, []);
    
    /**
     * Formatea una fecha a formato legible en español
     */
    const formatDate = useCallback((dateString: string | undefined): string => {
        if (!dateString) return "";
        
        const date = new Date(dateString);
        return date.toLocaleDateString("es-ES", {
            day: "2-digit",
            month: "short",
            year: "numeric"
        });
    }, []);



    /**
     * Obtiene el estado de un grado (activo/inactivo)
     */
    const getGradeStatus = useCallback((grade: Grado): 'active' | 'inactive' => {
        const hasActiveCycle = grade.gradosCiclo?.some((gc: any) => 
            gc.ciclo && gc.ciclo.fechaFin === null
        );
        return hasActiveCycle ? 'active' : 'inactive';
    }, []);

    /**
     * Limpia todos los filtros aplicados
     */
    const clearAllFilters = useCallback((): void => {
        setActiveSearchQuery("");
        setSearchQuery("");
        setLevelFilter("");
        setStatusFilter("");
        setSortField("id");
        setSortDirection("asc");
        setPage(1);
    }, []);

    /**
     * Aplica ordenamiento a los grados
     */

    
    // === MANEJADORES DE EVENTOS ===
    
    /**
     * Maneja la búsqueda de grados
     */
    const handleSearch = (e: React.FormEvent): void => {
        e.preventDefault();
        setActiveSearchQuery(searchQuery);
        setPage(1);
    };
    
    /**
     * Limpia la búsqueda activa
     */
    const clearSearch = (): void => {
        setActiveSearchQuery("");
        setSearchQuery("");
        setPage(1);
    };
    
    /**
     * Maneja el cambio en el input de búsqueda
     */

    
    // === MANEJADORES DEL MODAL DE ELIMINACIÓN ===
    
    /**
     * Abre el modal de confirmación de eliminación
     */
    const handleOpenDeleteModal = (gradeId: number): void => {
        setGradeToDelete(gradeId);
        setDeleteModalOpen(true);
    };
    
    /**
     * Cierra el modal de confirmación de eliminación
     */
    const handleCloseDeleteModal = (): void => {
        setDeleteModalOpen(false);
        setGradeToDelete(null);
    };
    
    /**
     * Confirma y ejecuta la eliminación del grado
     */
    const handleConfirmDelete = async (id: string): Promise<void> => {
        setDeleteLoading(true);
        try {
            await deleteGrado(parseInt(id));
            setDeleteModalOpen(false);
            
            // Recargar datos
            recargarDatos();
        } catch (error: any) {
            console.error("Error al eliminar el grado:", error);
        } finally {
            setDeleteLoading(false);
        }
    };

    // === RENDERIZADO DE TARJETAS ===
    
    // === COMPONENTES DE RENDERIZADO ===
    
    /**
     * Renderiza el estado de carga
     */
    const renderLoadingState = (): React.ReactElement => (
        <div className={styles.loadingContainer}>
            <div className={styles.loadingSpinner}></div>
            <div className={styles.loadingText}>Cargando grados...</div>
        </div>
    );



    /**
     * Renderiza el encabezado principal de la página con estadísticas
     */






    // === ESTADOS CONDICIONALES ===
    
    if (loading) return renderLoadingState();
    if (error) {
        return (
            <div className={styles.pageContainer}>
                <div className={styles.pageContent}>
                    <div className={styles.emptyState}>
                        <div className={styles.emptyStateIcon}>
                            <FaSearch />
                        </div>
                        <h3 className={styles.emptyStateTitle}>Error al cargar los datos</h3>
                        <p className={styles.emptyStateText}>
                            Ha ocurrido un problema al obtener la información de los grados académicos. 
                            Por favor intente nuevamente.
                        </p>
                        <button 
                            onClick={() => recargarDatos()} 
                            className={styles.emptyStateAction}
                        >
                            <FaSearch />
                            Reintentar
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    // === RENDERIZADO PRINCIPAL ===
    
    return (
        <div className={styles.pageContainer}>
            {/* Encabezado principal con dashboard */}
            <header className={styles.dashboardHeader}>
                <div className={styles.headerContent}>
                    <div className={styles.headerMain}>
                        <div className={styles.titleWrapper}>
                            <FaGraduationCap className={styles.headerIcon} />
                            <div>
                                <h1 className={styles.pageTitle}>Gestión de Grados Académicos</h1>
                                <p className={styles.pageDescription}>
                                    Sistema integral para la administración y organización de grados académicos
                                </p>
                            </div>
                        </div>

                        {/* Estadísticas en el encabezado */}
                        <div className={styles.statsContainer}>
                            <div className={styles.statCard}>
                                <div className={styles.statValue}>{gradeStatistics.total}</div>
                                <div className={styles.statLabel}>Total Grados</div>
                                <div className={styles.statIcon}>
                                    <FaChartBar />
                                </div>
                            </div>
                            
                            <div className={styles.statCard}>
                                <div className={styles.statValue}>{gradeStatistics.active}</div>
                                <div className={styles.statLabel}>Activos</div>
                                <div className={styles.statIcon}>
                                    <FaGraduationCap />
                                </div>
                            </div>
                            
                            <div className={styles.statCard}>
                                <div className={styles.statValue}>{gradeStatistics.inactive}</div>
                                <div className={styles.statLabel}>Inactivos</div>
                                <div className={styles.statIcon}>
                                    <FaTh />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </header>

            {/* Barra de herramientas y búsqueda */}
            <section className={styles.toolbarSection}>
                <div className={styles.toolbarHeader}>
                    <div className={styles.searchContainer}>
                        <form className={styles.searchForm} onSubmit={handleSearch}>
                                <FaSearch className={styles.searchIcon} />
                                <input
                                    type="text"
                                    className={styles.searchInput}
                                    placeholder="Buscar grados por nombre, nivel o jornada..."
                                    value={searchQuery}
                                    onChange={(e) => setSearchQuery(e.target.value)}
                                />
                                {searchQuery && (
                                    <button
                                        type="button"
                                        className={styles.clearSearch}
                                        onClick={clearSearch}
                                        aria-label="Limpiar búsqueda"
                                    >
                                        ×
                                    </button>
                                )}
                            </form>
                        </div>
                        
                        <div className={styles.actionButtons}>
                            <button
                                className={`${styles.filterButton} ${showFilters ? styles.active : ''}`}
                                onClick={() => setShowFilters(!showFilters)}
                            >
                                <FaFilter />
                                Filtros
                            </button>
                            
                            <Link to="/admin/crear-grado" className={styles.addButton}>
                                <FaPlus />
                                Nuevo Grado
                            </Link>
                        </div>
                    </div>
                    
                    {showFilters && (
                        <div className={styles.filtersContainer}>
                            <div className={styles.filterGroup}>
                                <label htmlFor="levelFilter" className={styles.filterLabel}>
                                    Nivel Académico
                                </label>
                                <select
                                    id="levelFilter"
                                    className={styles.filterSelect}
                                    value={levelFilter}
                                    onChange={(e) => setLevelFilter(e.target.value)}
                                >
                                    {LEVEL_FILTER_OPTIONS.map(option => (
                                        <option key={option.value} value={option.value}>
                                            {option.label}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            
                            <div className={styles.filterGroup}>
                                <label htmlFor="statusFilter" className={styles.filterLabel}>
                                    Estado
                                </label>
                                <select
                                    id="statusFilter"
                                    className={styles.filterSelect}
                                    value={statusFilter}
                                    onChange={(e) => setStatusFilter(e.target.value)}
                                >
                                    {STATUS_FILTER_OPTIONS.map(option => (
                                        <option key={option.value} value={option.value}>
                                            {option.label}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            
                            <div className={styles.filterGroup}>
                                <label htmlFor="sortField" className={styles.filterLabel}>
                                    Ordenar por
                                </label>
                                <select
                                    id="sortField"
                                    className={styles.filterSelect}
                                    value={sortField}
                                    onChange={(e) => setSortField(e.target.value)}
                                >
                                    {SORT_OPTIONS.map(option => (
                                        <option key={option.value} value={option.value}>
                                            {option.label}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            
                            <div className={styles.filterGroup}>
                                <label htmlFor="sortDirection" className={styles.filterLabel}>
                                    Dirección
                                </label>
                                <select
                                    id="sortDirection"
                                    className={styles.filterSelect}
                                    value={sortDirection}
                                    onChange={(e) => setSortDirection(e.target.value as 'asc' | 'desc')}
                                >
                                    <option value="asc">Ascendente</option>
                                    <option value="desc">Descendente</option>
                                </select>
                            </div>
                            
                            <div className={styles.filterActions}>
                                <button
                                    className={styles.resetButton}
                                    onClick={clearAllFilters}
                                >
                                    Limpiar
                                </button>
                            </div>
                        </div>
                    )}
                </section>

                {/* Banner de búsqueda activa */}
                {activeSearchQuery && (
                    <div className={styles.activeSearchBanner}>
                        <span>Mostrando resultados para: "{activeSearchQuery}"</span>
                        <button onClick={clearSearch} className={styles.clearSearchButton}>
                            Limpiar búsqueda
                        </button>
                    </div>
                )}

                {/* Contenido principal: Listado de grados o estado vacío */}
                {loading ? (
                    <div className={styles.loadingState}>
                        <div className={styles.loadingSpinner}></div>
                        <p className={styles.loadingText}>Cargando grados académicos...</p>
                    </div>
                ) : !filteredGrades || filteredGrades.length === 0 ? (
                    <div className={styles.emptyState}>
                        <div className={styles.emptyStateIcon}>
                            {activeSearchQuery || levelFilter || statusFilter ? <FaSearch /> : <FaGraduationCap />}
                        </div>
                        <h3 className={styles.emptyStateTitle}>
                            {activeSearchQuery || levelFilter || statusFilter 
                                ? 'No se encontraron grados con esos criterios' 
                                : 'No hay grados académicos registrados'
                            }
                        </h3>
                        <p className={styles.emptyStateText}>
                            {activeSearchQuery || levelFilter || statusFilter
                                ? "Intente ajustando los filtros o términos de búsqueda para obtener resultados" 
                                : "Puede comenzar creando el primer grado académico en el sistema"
                            }
                        </p>
                        {!activeSearchQuery && !levelFilter && !statusFilter ? (
                            <Link to="/admin/crear-grado" className={styles.emptyStateAction}>
                                <FaPlus />
                                Crear primer grado
                            </Link>
                        ) : (
                            <button onClick={clearAllFilters} className={styles.emptyStateAction}>
                                <FaFilter />
                                Limpiar filtros
                            </button>
                        )}
                    </div>
                ) : (
                    <>
                        <div className={styles.gradesGrid}>
                            {filteredGrades.map((grade: Grado) => (
                                <div
                                    key={grade.id}
                                    className={`${styles.gradeCard} ${
                                        highlightedRow === grade.id.toString() ? styles.highlighted : ''
                                    }`}
                                >
                                    <div className={styles.cardHeader}>
                                        <div className={styles.cardAvatar}>
                                            {getInitials(grade)}
                                        </div>
                                        <div className={styles.cardHeaderContent}>
                                            <h3 className={styles.cardTitle}>
                                                {grade.nombre || 'Grado sin nombre'}
                                            </h3>
                                            <div className={styles.cardMeta}>
                                                <span className={styles.cardId}>ID: {grade.id}</span>
                                                <span className={styles.cardLevel}>
                                                    {grade.nivelAcademico?.descripcion || 'Sin nivel'}
                                                </span>
                                            </div>
                                        </div>
                                        <div className={`${styles.statusBadge} ${styles[getGradeStatus(grade)]}`}>
                                            {getGradeStatus(grade) === 'active' ? 'ACTIVO' : 'INACTIVO'}
                                        </div>
                                    </div>
                                    
                                    <div className={styles.cardBody}>
                                        <div className={styles.detailRow}>
                                            <span className={styles.detailLabel}>Jornada:</span>
                                            <span className={styles.detailValue}>
                                                {grade.jornada?.descripcion || 'No definida'}
                                            </span>
                                        </div>
                                        
                                        {grade.gradosCiclo && grade.gradosCiclo.some((gc: any) => 
                                            gc.ciclo && gc.ciclo.fechaFin === null
                                        ) && (
                                            <div className={styles.detailRow}>
                                                <span className={styles.detailLabel}>Ciclo Activo:</span>
                                                <span className={styles.detailValue}>
                                                    {grade.gradosCiclo.find((gc: any) => 
                                                        gc.ciclo && gc.ciclo.fechaFin === null
                                                    )?.ciclo?.descripcion || 'Ciclo actual'}
                                                </span>
                                            </div>
                                        )}
                                        
                                        <div className={styles.detailRow}>
                                            <span className={styles.detailLabel}>Creación:</span>
                                            <span className={styles.detailValue}>
                                                {formatDate(grade.createdAt)}
                                            </span>
                                        </div>
                                    </div>
                                    
                                    <div className={styles.cardFooter}>
                                        <Link
                                            to={`/admin/grado/${grade.id}`}
                                            className={`${styles.cardAction} ${styles.view}`}
                                            onClick={() => localStorage.setItem('lastViewedGrade', grade.id.toString())}
                                        >
                                            <FaEye />
                                            Ver
                                        </Link>
                                        
                                        <Link
                                            to={`/admin/editar-grado/${grade.id}`}
                                            className={`${styles.cardAction} ${styles.edit}`}
                                        >
                                            <FaPencilAlt />
                                            Editar
                                        </Link>
                                        
                                        <button
                                            onClick={() => handleOpenDeleteModal(grade.id)}
                                            className={`${styles.cardAction} ${styles.delete}`}
                                        >
                                            <FaTrash />
                                            Eliminar
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>
                        
                        {/* Paginación */}
                        <div className={styles.pagination}>
                            <div className={styles.pageInfo}>
                                Mostrando {filteredGrades.length} de {grades?.total || 0} resultados
                            </div>
                            
                            <div className={styles.pageControls}>
                                <button
                                    className={styles.pageButton}
                                    onClick={() => setPage(page > 1 ? page - 1 : 1)}
                                    disabled={page === 1}
                                >
                                    &lt;
                                </button>
                                
                                {[...Array(Math.ceil((grades?.total || 0) / pageSize))].map((_, i) => (
                                    <button
                                        key={i}
                                        className={`${styles.pageButton} ${page === i + 1 ? styles.active : ''}`}
                                        onClick={() => setPage(i + 1)}
                                    >
                                        {i + 1}
                                    </button>
                                ))}
                                
                                <button
                                    className={styles.pageButton}
                                    onClick={() => setPage(page < Math.ceil((grades?.total || 0) / pageSize) ? page + 1 : page)}
                                    disabled={page >= Math.ceil((grades?.total || 0) / pageSize)}
                                >
                                    &gt;
                                </button>
                            </div>
                        </div>
                    </>
                )}
            </div>
            
            {/* Modal de confirmación para eliminar grado */}
            <DeleteConfirmModal 
                isOpen={deleteModalOpen}
                title="Eliminar Grado"
                message={`¿Está seguro que desea eliminar el grado "${gradeToDelete}"? Esta acción no se puede deshacer.`}
                itemId={gradeToDelete?.toString() || ""}
                onConfirm={handleConfirmDelete}
                onCancel={handleCloseDeleteModal}
                isLoading={deleteLoading}
            />
        </div>
    );
};

export default GradesPage;
