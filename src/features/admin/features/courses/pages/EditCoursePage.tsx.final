import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useParams } from 'react-router-dom';
import styles from './EditCoursePage.module.css';
import {
    FaBook,
    FaChalkboardTeacher,
    FaHashtag,
    FaCalendarAlt,
    FaArrowLeft,
    FaCheck,
    FaCog,
    FaGraduationCap,
    FaSpinner,
    FaSave,
    FaExclamationTriangle,
    FaUserTie,
    FaPercentage,
    FaInfoCircle,
    FaQuestionCircle
} from "react-icons/fa";
import { getCourseById } from '../services/courseService';
import { updateCurso } from '../../grades/services/cursoService';

// Puedes ajustar el import del modelo según tu estructura
import type { Course } from "../models";

interface FormErrors {
    [key: string]: string;
}

const EditCoursePage: React.FC = () => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();

    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    
    // Estados para los campos del formulario
    const [formData, setFormData] = useState({
        id: '',
        nombre: '',
        notaMaxima: 100,
        notaAprobada: 60,
        idGrado: 0,
        dpiCatedratico: ''
    });
    
    const [errors, setErrors] = useState<FormErrors>({});
    const [touched, setTouched] = useState<Record<string, boolean>>({});
    const [showNotification, setShowNotification] = useState<boolean>(false);
    const [notificationType, setNotificationType] = useState<'success' | 'error'>('success');
    const [notificationMessage, setNotificationMessage] = useState('');

    // Obtener datos del curso actual
    useEffect(() => {
        const fetchCourse = async () => {
            setLoading(true);
            setError(null);
            try {
                const data = await getCourseById(id!);
                setFormData({
                    id: id || '',
                    nombre: data.curso.nombre || '',
                    notaMaxima: data.curso.notaMaxima || 100,
                    notaAprobada: data.curso.notaAprobada || 60,
                    idGrado: data.curso.gradoCiclo?.idGrado || 0,
                    dpiCatedratico: data.curso.dpiCatedratico || ''
                });
            } catch (err: any) {
                setError(err.message || 'Error al cargar el curso');
            } finally {
                setLoading(false);
            }
        };
        fetchCourse();
    }, [id]);

    const validateField = (name: string, value: string | number): string => {
        switch (name) {
            case 'nombre':
                return value.toString().trim() === '' ? 'El nombre del curso es requerido' : '';
            case 'notaMaxima':
                return isNaN(Number(value)) ? 'La nota máxima debe ser un número válido' : '';
            case 'notaAprobada':
                return isNaN(Number(value)) ? 'La nota de aprobación debe ser un número válido' : '';
            case 'idGrado':
                return isNaN(Number(value)) ? 'El ID del grado debe ser un número válido' : '';
            case 'dpiCatedratico':
                return value.toString().trim() === '' ? 'El DPI del catedrático es requerido' : '';
            default:
                return '';
        }
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;

        setFormData(prev => ({
            ...prev,
            [name]: name === 'notaMaxima' || name === 'notaAprobada' || name === 'idGrado' 
                ? (value === '' ? 0 : parseInt(value, 10)) 
                : value
        }));

        // Validar el campo cuando cambia
        if (touched[name]) {
            const errorMessage = validateField(name, value);
            setErrors(prev => ({
                ...prev,
                [name]: errorMessage
            }));
        }
    };

    const handleBlur = (e: React.FocusEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;

        setTouched(prev => ({
            ...prev,
            [name]: true
        }));

        const errorMessage = validateField(name, value);
        setErrors(prev => ({
            ...prev,
            [name]: errorMessage
        }));
    };

    const validateForm = (): boolean => {
        const newErrors: FormErrors = {};
        let isValid = true;

        // Validar campos requeridos
        if (!formData.nombre) {
            newErrors.nombre = 'El nombre del curso es requerido';
            isValid = false;
        }

        if (isNaN(Number(formData.notaMaxima))) {
            newErrors.notaMaxima = 'La nota máxima debe ser un número válido';
            isValid = false;
        }

        if (isNaN(Number(formData.notaAprobada))) {
            newErrors.notaAprobada = 'La nota de aprobación debe ser un número válido';
            isValid = false;
        }

        if (!formData.dpiCatedratico) {
            newErrors.dpiCatedratico = 'El DPI del catedrático es requerido';
            isValid = false;
        }

        setErrors(newErrors);
        return isValid;
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        // Marcar todos los campos como tocados
        const allTouched: Record<string, boolean> = {};
        Object.keys(formData).forEach(key => {
            allTouched[key] = true;
        });
        setTouched(allTouched);

        if (validateForm()) {
            setSaving(true);
            try {
                const response = await updateCurso({
                    id: Number(id),
                    nombre: formData.nombre,
                    notaMaxima: Number(formData.notaMaxima),
                    notaAprobada: Number(formData.notaAprobada),
                    idGrado: Number(formData.idGrado),
                    dpiCatedratico: formData.dpiCatedratico
                });

                // Mostrar notificación de éxito
                setNotificationType('success');
                setNotificationMessage(response.message || 'Curso actualizado con éxito');
                setShowNotification(true);
                setSuccess('Curso actualizado con éxito');

                // Redirigir después de un breve momento
                setTimeout(() => {
                    navigate(`/admin/cursos/${id}`);
                }, 2000);

            } catch (err: any) {
                setError(err.message || "Error al actualizar el curso");
                setNotificationType('error');
                setNotificationMessage(err?.response?.data?.message || err.message || 'Error al actualizar el curso');
                setShowNotification(true);
            } finally {
                setSaving(false);
            }
        }
    };

    return (
        <div className={styles.formContainer}>
            {/* Encabezado con migas de pan */}
            <div className={styles.pageHeader}>
                <div className={styles.breadcrumb}>
                    <Link to="/admin/cursos">Cursos</Link>
                    <span className={styles.breadcrumbSeparator}>/</span>
                    <Link to={`/admin/cursos/${id}`}>{formData.nombre || 'Detalle de curso'}</Link>
                    <span className={styles.breadcrumbSeparator}>/</span>
                    <span className={styles.breadcrumbCurrent}>Editar curso</span>
                </div>

                <Link to={`/admin/cursos/${id}`} className={styles.buttonCancel}>
                    <FaArrowLeft size={14} style={{ marginRight: '6px' }} />
                    Volver a detalles
                </Link>
            </div>

            {loading ? (
                <div className={styles.loadingContainer}>
                    <div className={styles.loader}></div>
                    <p>Cargando datos del curso...</p>
                </div>
            ) : error && !success ? (
                <div className={styles.errorContainer}>
                    <p className={styles.errorMessage}>{error}</p>
                    <Link to="/admin/cursos" className={styles.buttonCancel}>
                        Volver a la lista
                    </Link>
                </div>
            ) : (
                /* Formulario */
                <form onSubmit={handleSubmit}>
                    <div className={styles.formCard}>
                        {/* Sección: Información básica */}
                        <div className={styles.formSection}>
                            <div className={styles.sectionHeader}>
                                <div className={styles.sectionIcon}>
                                    <FaBook />
                                </div>
                                <div>
                                    <h3 className={styles.sectionTitle}>Información del curso</h3>
                                    <p className={styles.sectionDescription}>
                                        Datos principales del curso
                                    </p>
                                </div>
                            </div>

                            <div className={styles.formGrid}>
                                <div className={styles.inputGroup}>
                                    <label className={`${styles.inputLabel} ${styles.requiredField}`}>
                                        Nombre del curso
                                    </label>
                                    <div className={styles.inputWrapper}>
                                        <FaBook className={styles.inputIcon} />
                                        <input
                                            type="text"
                                            name="nombre"
                                            className={styles.input}
                                            placeholder="Nombre del curso"
                                            value={formData.nombre}
                                            onChange={handleChange}
                                            onBlur={handleBlur}
                                        />
                                    </div>
                                    {touched.nombre && errors.nombre && (
                                        <p className={styles.errorText}>{errors.nombre}</p>
                                    )}
                                </div>
                            </div>
                        </div>

                        {/* Sección: Calificaciones */}
                        <div className={styles.formSection}>
                            <div className={styles.sectionHeader}>
                                <div className={styles.sectionIcon}>
                                    <FaGraduationCap />
                                </div>
                                <div>
                                    <h3 className={styles.sectionTitle}>Configuración de calificaciones</h3>
                                    <p className={styles.sectionDescription}>
                                        Parámetros para evaluar el curso
                                    </p>
                                </div>
                            </div>

                            <div className={styles.formGrid}>
                                <div className={styles.inputGroup}>
                                    <label className={`${styles.inputLabel} ${styles.requiredField}`}>
                                        Nota máxima
                                    </label>
                                    <div className={styles.inputWrapper}>
                                        <FaPercentage className={styles.inputIcon} />
                                        <input
                                            type="number"
                                            name="notaMaxima"
                                            className={styles.input}
                                            placeholder="100"
                                            value={formData.notaMaxima}
                                            onChange={handleChange}
                                            onBlur={handleBlur}
                                            min={1}
                                            max={100}
                                        />
                                    </div>
                                    {touched.notaMaxima && errors.notaMaxima && (
                                        <p className={styles.errorText}>{errors.notaMaxima}</p>
                                    )}
                                    <p className={styles.helpText}>Valor máximo para calificaciones del curso</p>
                                </div>

                                <div className={styles.inputGroup}>
                                    <label className={`${styles.inputLabel} ${styles.requiredField}`}>
                                        Nota aprobatoria
                                    </label>
                                    <div className={styles.inputWrapper}>
                                        <FaCheck className={styles.inputIcon} />
                                        <input
                                            type="number"
                                            name="notaAprobada"
                                            className={styles.input}
                                            placeholder="60"
                                            value={formData.notaAprobada}
                                            onChange={handleChange}
                                            onBlur={handleBlur}
                                            min={1}
                                            max={formData.notaMaxima}
                                        />
                                    </div>
                                    {touched.notaAprobada && errors.notaAprobada && (
                                        <p className={styles.errorText}>{errors.notaAprobada}</p>
                                    )}
                                    <p className={styles.helpText}>Nota mínima para aprobar el curso</p>
                                </div>
                            </div>
                        </div>

                        {/* Sección: Asignación */}
                        <div className={styles.formSection}>
                            <div className={styles.sectionHeader}>
                                <div className={styles.sectionIcon}>
                                    <FaUserTie />
                                </div>
                                <div>
                                    <h3 className={styles.sectionTitle}>Asignación académica</h3>
                                    <p className={styles.sectionDescription}>
                                        Asignación de grado y catedrático
                                    </p>
                                </div>
                            </div>

                            <div className={styles.formGrid}>
                                <div className={styles.inputGroup}>
                                    <label className={`${styles.inputLabel} ${styles.requiredField}`}>
                                        ID del Grado
                                    </label>
                                    <div className={styles.inputWrapper}>
                                        <FaGraduationCap className={styles.inputIcon} />
                                        <input
                                            type="number"
                                            name="idGrado"
                                            className={styles.input}
                                            placeholder="ID del grado"
                                            value={formData.idGrado}
                                            onChange={handleChange}
                                            onBlur={handleBlur}
                                        />
                                    </div>
                                    {touched.idGrado && errors.idGrado && (
                                        <p className={styles.errorText}>{errors.idGrado}</p>
                                    )}
                                </div>

                                <div className={styles.inputGroup}>
                                    <label className={`${styles.inputLabel} ${styles.requiredField}`}>
                                        DPI del Catedrático
                                    </label>
                                    <div className={styles.inputWrapper}>
                                        <FaUserTie className={styles.inputIcon} />
                                        <input
                                            type="text"
                                            name="dpiCatedratico"
                                            className={styles.input}
                                            placeholder="DPI del catedrático"
                                            value={formData.dpiCatedratico}
                                            onChange={handleChange}
                                            onBlur={handleBlur}
                                        />
                                    </div>
                                    {touched.dpiCatedratico && errors.dpiCatedratico && (
                                        <p className={styles.errorText}>{errors.dpiCatedratico}</p>
                                    )}
                                </div>
                            </div>
                        </div>

                        {/* Botones de acción */}
                        <div className={styles.formActions}>
                            <Link
                                to={`/admin/cursos/${id}`}
                                className={styles.buttonCancel}
                            >
                                <FaArrowLeft style={{ marginRight: '6px' }} />
                                Cancelar
                            </Link>
                            <button
                                type="submit"
                                className={`${styles.buttonSubmit} ${saving ? styles.buttonLoading : ''}`}
                                disabled={saving}
                            >
                                {saving ? (
                                    <>
                                        <FaSpinner className={styles.spinnerIcon} />
                                        <span>Actualizando...</span>
                                    </>
                                ) : (
                                    <>
                                        <FaSave style={{ marginRight: '6px' }} />
                                        Guardar Cambios
                                    </>
                                )}
                            </button>
                        </div>
                    </div>
                </form>
            )}

            {/* Notificación flotante */}
            {showNotification && (
                <div className={`${styles.notification} ${styles[notificationType]}`}>
                    <div className={styles.notificationContent}>
                        <div className={styles.notificationIcon}>
                            {notificationType === 'success' ? (
                                <FaCheck />
                            ) : (
                                <span className={styles.errorIcon}>!</span>
                            )}
                        </div>
                        <div className={styles.notificationText}>
                            <h4>
                                {notificationType === 'success' ? 'Operación exitosa' : 'Error'}
                            </h4>
                            <p>{notificationMessage}</p>
                        </div>
                    </div>
                    <button
                        className={styles.closeNotification}
                        onClick={() => setShowNotification(false)}
                    >
                        ×
                    </button>
                </div>
            )}

            {success && (
                <div className={styles.success}>
                    <FaCheck style={{marginRight: '8px'}} /> {success}
                </div>
            )}
        </div>
    );
};

export default EditCoursePage;
